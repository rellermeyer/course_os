#ifndef HASH_MAP_H
#define HASH_MAP_H

#include <ds.h>


typedef struct HashSetElement {
    uint32_t hash;
    void * key;
} HashSetElement;

typedef struct HashMapElement {
    HashSetElement base;
    void * data;
} HashMapElement;

typedef struct HashMap {
    HashFunc hashFunc;
    CompareFunc compareFunc;
    FreeFunc freeKey;
    FreeFunc freeData;
    struct VPSinglyLinkedList * buckets;
    uint32_t n_buckets;
} HashMap;

typedef HashMap HashSet;

// Creates a new hashmap with given hash function and number of buckets
HashMap * hm_new(HashFunc hashf, FreeFunc datafreef, FreeFunc keyfreef, CompareFunc comparef, uint32_t n_buckets);
HashSet * hs_new(HashFunc hashf, FreeFunc datafreef, FreeFunc keyfreef, CompareFunc comparef, uint32_t n_buckets);

// inserts an element into the hashmap/hashset
void hm_insert(HashMap * hm, void * key, void * data);
void hs_insert(HashSet * hs, void * key);

// Gets the element associated with the key
void * hm_get(HashMap * hm, void * key);

// Returns true if the element is included.
bool hm_contains(HashMap * hm, void * key);
bool hs_contains(HashSet * hm, void * key);

// removes an element from the hashmap/hashset, returns the element so it can be freed
void * hm_remove(HashMap * hm, void * key);
void * hs_remove(HashSet * hs, void * key);

// Frees the hashmap completely uses the FreeFunc to free any left over data.
void hm_free(HashMap * hm);
void hs_free(HashSet * hm);

#endif
