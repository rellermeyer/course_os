{% macro test(name, block) %}
bool run_test_{{name}}(void) {
    {{block}}
    return TEST_PASS;
}

bool __internal_test_{{name}}(void) {
    heap_t * heap = mem_get_allocator();
    isize_t nbytes = heap->bytes_allocated;
    bool res = run_test_{{name}}();

    if (res == TEST_FAIL) return TEST_FAIL;
    if (nbytes != (isize_t)heap->bytes_allocated) {
        ANSI_256(160);
        kprintf("├──FAILED (MEMORY LEAK: %i bytes)\n",
                heap->bytes_allocated - nbytes);
        ANSI(RESET);
        return TEST_FAIL;
    }

    return TEST_PASS;
}

bool test_{{name}}(void) {
    ANSI_256(163);
    puts("├─[TEST] ");
    ANSI(RESET);
    puts("{{name}}\n");

    bool res = (get_trace_memory()) ? __internal_test_{{name}}() : run_test_{{name}}();

    if (res == TEST_PASS) {
        ANSI(HI_GREEN);

        puts("├──PASSED {{name}}\n");
        ANSI(RESET);
        return 1;
    }

    ANSI(HI_RED);
    puts("└──FAILED {{name}}\n");
    ANSI(RESET);
    return 0;
}
{% endmacro %}
